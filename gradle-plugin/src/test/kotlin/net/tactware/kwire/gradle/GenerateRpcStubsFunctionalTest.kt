package net.tactware.kwire.gradle

import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.io.TempDir
import java.io.File

class GenerateRpcStubsFunctionalTest {

    @TempDir
    lateinit var testProjectDir: File

    private fun writeFile(relativePath: String, content: String): File {
        val target = File(testProjectDir, relativePath)
        target.parentFile.mkdirs()
        target.writeText(content)
        return target
    }

    @Test
    fun `generateRpcStubs produces client file for @RpcService interface`() {
        // Prepare minimal Gradle project applying our plugin and Kotlin JVM
        writeFile(
            "settings.gradle.kts",
            """
            rootProject.name = "gen-test"
            """.trimIndent()
        )

        writeFile(
            "build.gradle.kts",
            """
            plugins {
                kotlin("jvm") version "2.2.0"
                id("net.tactware.kwire.plugin")
            }
            repositories { mavenCentral() }
            kotlin { jvmToolchain(17) }
            // Keep defaults of the extension; we only need sources to be scanned.
            """.trimIndent()
        )

        // Create a simple service interface. Parser uses regex and does not require the actual annotations to resolve.
        // Ensure exact pattern: @RpcService("...") interface Name { @RpcMethod("...") suspend fun ... : Return }
        val serviceKt = """
            package com.example

            interface User { val id: Int; val name: String }

            @RpcService("UserService")
            interface UserService {
                @RpcMethod("getUser")
                suspend fun getUser(id: Int): User
            }
        """.trimIndent()
        writeFile("src/main/kotlin/com/example/UserService.kt", serviceKt)

        val result = GradleRunner.create()
            .withProjectDir(testProjectDir)
            .withPluginClasspath()
            .withArguments("generateRpcStubs", "--stacktrace")
            .build()

        assertEquals(TaskOutcome.SUCCESS, result.task(":generateRpcStubs")?.outcome)

        // Assert the output file exists with the expected name
        val generatedFile = File(testProjectDir, "build/generated/rpc/com/example/UserServiceClientImpl.kt")
        assertTrue(generatedFile.exists(), "Expected generated client file at: ${generatedFile.absolutePath}")

        // Content should include the generator header from ServiceClientGenerator output
        val content = generatedFile.readText()
        assertTrue(
            content.contains("Generated by KWire RPC Plugin â€” DO NOT EDIT"),
            "Generated file should include the generator header. Content was:\n$content"
        )

        // Also sanity-check it mentions the interface name and service name in KDoc
        assertTrue(content.contains("Client implementation for UserService (UserService)"))
    }
}
